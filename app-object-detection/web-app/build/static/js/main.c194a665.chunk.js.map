{"version":3,"sources":["containers/Home.js","containers/NotFound.js","components/LoaderButton.js","config.js","libs/errorLib.js","containers/NewInference.js","containers/Result.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","NotFound","LoaderButton","isLoading","disabled","props","Button","Glyphicon","glyph","children","REGION","URL","onError","error","message","toString","Error","alert","NewInference","file","useRef","useState","result","setResult","image","setImage","useHistory","setIsLoading","event","a","preventDefault","inference","response","API","post","headers","body","onSubmit","FormGroup","controlId","ControlLabel","FormControl","onChange","current","target","files","console","log","reader","FileReader","readAsDataURL","onloadend","base64string","imageBase64","substr","indexOf","type","block","bsSize","bsStyle","src","Result","Routes","exact","path","App","Navbar","fluid","collapseOnSelect","Header","Brand","to","Toggle","Boolean","window","location","hostname","match","Amplify","configure","endpoints","name","endpoint","config","region","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c194a665.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\n\nexport default function Home() {\n  return (\n    <div className=\"Home\">\n      <div className=\"lander\">\n        <h1>Object Detection </h1>\n        <p>Detect objects on your photos with YOLOv2</p>\n      </div>\n    </div>\n  );\n}","import React from \"react\";\nimport \"./NotFound.css\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h3>This page does not exist</h3>\n    </div>\n  );\n}","import React from \"react\";\nimport { Button, Glyphicon } from \"react-bootstrap\";\nimport \"./LoaderButton.css\";\n\nexport default function LoaderButton({\n  isLoading,\n  className = \"\",\n  disabled = false,\n  ...props\n}) {\n  return (\n    <Button\n      className={`LoaderButton ${className}`}\n      disabled={disabled || isLoading}\n      {...props}\n    >\n      {isLoading && <Glyphicon glyph=\"refresh\" className=\"spinning\" />}\n      {props.children}\n    </Button>\n  );\n}","export default {\n    IMAGE_FORMAT: \".png\",\n\n    apiGateway: {\n      REGION: \"us-east-1\",\n      URL: \"https://ogz49gve3m.execute-api.us-east-1.amazonaws.com/default/simple-test\"\n    },\n    \n  };","export function onError(error) {\n    let message = error.toString();\n  \n    // Auth errors\n    if (!(error instanceof Error) && error.message) {\n      message = error.message;\n    }\n  \n    alert(message);\n  }","import React, { useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport config from \"../config\";\nimport \"./NewInference.css\";\nimport { API } from \"aws-amplify\";\nimport { onError } from \"../libs/errorLib\";\nimport { Link } from \"react-router-dom\";\n\nexport default function NewInference() {\n  const file = useRef(null);\n  const [result, setResult] = useState(null);\n  const [image, setImage] = useState(null);\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  \n\n  function handleFileChange(event) {\n    file.current = event.target.files[0];\n    console.log(file.current);\n\n    var reader = new FileReader();\n    reader.readAsDataURL(file.current);\n    reader.onloadend = function() {\n      const base64string = reader.result;\n      // console.log(\"Base64 String - \", base64string);\n      var imageBase64 = base64string.substr(base64string.indexOf(',') + 1);\n      setImage(imageBase64);\n      // console.log('Base64 String without Tags- ', imageBase64);\n    }\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    try {\n    // Method 1\n      let response = await inference(image);\n      setResult(response);\n    \n    } catch (e) {\n      onError(e);\n    }\n    setIsLoading(false);\n  }\n  \n  function inference(image) {\n    return API.post(\"inference\", ``, {\n      headers: {\n        \"Content-Type\": \"application/json\", \n        \"Accept\": \"application/json\"\n      },\n      body: image\n    });\n    \n  }\n\n  \n  var data = result || \"Hello\";\n  \n  return (\n    <div className=\"NewInference\">\n\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"imageFile\">\n          <ControlLabel>File </ControlLabel>\n          <FormControl onChange={handleFileChange} type=\"file\" />\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          bsStyle=\"primary\"\n          isLoading={isLoading}\n        >\n         Detect\n        </LoaderButton>\n      </form>\n      <h4>\n        <img src={`data:image/png;base64,${result}`} />\n      </h4>\n    \n    </div>\n  );\n  }","import React, { useState, useEffect } from \"react\";\nimport { PageHeader, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport { onError } from \"../libs/errorLib\";\nimport \"./Result.css\";\nimport { Link } from \"react-router-dom\";\n\n\nexport default function Result() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [result, setResult] = useState([]);\n\n\n  return (\n    <div className=\"Home\">\n     <p>This is my result: { result }</p>\n     \n    </div>\n  );\n}","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./containers/Home\";\nimport NotFound from \"./containers/NotFound\";\nimport NewInference from \"./containers/NewInference\";\nimport Result from \"./containers/Result\";\n\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n      <Route exact path=\"/inference\">\n        <NewInference />\n      </Route>\n      <Route exact path=\"/result\">\n        <Result />\n      </Route>\n\n      <Route>\n        <NotFound />\n      </Route>\n    </Switch>\n  );\n}","import React from \"react\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\nimport { Link, useHistory} from \"react-router-dom\";\nimport { Nav, Navbar, NavItem } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Navbar fluid collapseOnSelect>\n        <Navbar.Header>\n          <Navbar.Brand>\n            <Link to=\"/\">Home</Link>\n          </Navbar.Brand>\n          <Navbar.Toggle />\n        </Navbar.Header>\n      </Navbar>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from 'react-router-dom';\nimport { Amplify } from 'aws-amplify';\nimport config from './config.js'\n\nAmplify.configure({\n  API: {\n    endpoints: [\n      {\n        name: \"inference\",\n        endpoint: config.apiGateway.URL,\n        region: config.apiGateway.REGION\n      },\n    ]\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}